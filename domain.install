<?php

/**
 * @file
 * Install file.
 */

/**
 * Implements hook_install().
 */
function domain_install() {
  domain_set_primary_domain();
  // Dynamically generated variable data was detected on the following lines.
  // /domain/domain.install line 393
  // /domain/domain.module line 1298
  // /domain/domain.module line 4332
}

/**
 * Implements hook_schema().
 */
function domain_schema() {
  $schema['domain'] = array(
    'description' => 'The base table for domain records',
    'fields' => array(
      'domain_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Domain numeric id.',
      ),
      'subdomain' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Registered DNS entry, will match HTTP_HOST requests',
      ),
      'sitename' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Site display name',
      ),
      'scheme' => array(
        'type' => 'varchar',
        'length' => '8',
        'not null' => TRUE,
        'default' => 'http',
        'description' => 'Protocol',
      ),
      'valid' => array(
        'type' => 'varchar',
        'length' => '1',
        'not null' => TRUE,
        'default' => '1',
        'description' => 'Active status',
      ),
      'weight' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Sort order',
      ),
      'is_default' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Indicates primary domain',
      ),
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'The machine name for this domain.',
      ),
    ),
    'primary key' => array('domain_id'),
    'indexes' => array(
      'subdomain' => array('subdomain'),
      'weight' => array('weight'),
      'is_default' => array('is_default'),
    ),
    'foreign_keys' => array(
      'domain_id' => array('domain_export' => 'domain_id'),
      'machine_name' => array('domain_export' => 'machine_name'),
    ),
  );
  $schema['domain_access'] = array(
    'description' => 'Stores domain information for each node',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Node id, foreign key to {node}',
      ),
      'gid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Node access grant id',
      ),
      'realm' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Node access realm',
      ),
    ),
    'primary key' => array('nid', 'gid', 'realm'),
    'indexes' => array(
      'nid' => array('nid'),
    ),
    'foreign_keys' => array(
      'nid' => array('node' => 'nid'),
    ),
  );
  $schema['domain_editor'] = array(
    'description' => 'Stores domain information for each user',
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'User id, foreign key to {user}',
      ),
      'domain_id' => array(
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Domain id, foreign key to {domain}',
      ),
    ),
    'primary key' => array('uid', 'domain_id'),
    'foreign_keys' => array(
      'uid' => array('user' => 'uid'),
      'domain_id' => array('domain' => 'domain_id'),
    ),
  );
  $schema['domain_export'] = array(
    'description' => 'Stores canonical machine names for domains.',
    'fields' => array(
      'domain_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Domain id. Automatic master key.',
      ),
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'The machine name for this domain.',
      ),
    ),
    'unique keys' => array('machine_name' => array('machine_name')),
    'indexes' => array(
      'domain_id' => array('domain_id'),
    ),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function domain_uninstall() {
  $variables = array(
    'domain_bootstrap_modules',
    'domain_classes',
    'domain_cron_rule',
    'domain_debug',
    'domain_default_source',
    'domain_edit_on_primary',
    'domain_force_admin',
    'domain_grant_all',
    'domain_list_size',
    'domain_paths',
    'domain_search',
    'domain_select_format',
    'domain_sitename_override',
    'domain_seo',
    'domain_vertical_tab',
    'domain_www',
    'domain_xmlrpc_rule',
  );
  if (function_exists('node_type_get_types')) {
    $types = node_type_get_types();
    foreach ($types as $key => $type) {
      $variables[] = 'domain_node_' . $key;
    }
  }
  foreach ($variables as $variable) {
    // TODO This variable was probably removed in Backdrop without replacement.

    variable_del($variable);
  }
}

/**
 * Checks module requirements.
 */
function domain_requirements($phase) {
  $requirements = array();
  switch ($phase) {
    case 'install':
      module_load_include('module', 'domain');
      $root = strtolower(rtrim($_SERVER['HTTP_HOST']));
      if ($error = domain_valid_domain($root)) {
        $requirements['domain'] = array(
          'title' => t('Domain Access'),
          'value' => $error . t('If you are using drush, please provide the --uri option (e.g. drush en domain --uri="http://example.com/optional_subdirectory").'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      break;
    case 'runtime':
      $messages = array();
      $severity = REQUIREMENT_ERROR;
      // Ensure we have a primary domain.


      $check = domain_default();
      if ($check['domain_id'] == 0) {
        $updated = t('set by an administrator');
        if (user_access('administer domains')) {
          $updated = l(t('set properly'), 'admin/structure/domain');
        }
        $messages[] = t('The site has no primary domain and needs to be !updated.', array('!updated' => $updated));
      }
      // Check for domain_id 0.


      $list = domain_update_module_check();
      domain_update_messages($messages, $list);

      // Now report.


      $t = get_t();
      if (empty($messages)) {
        $severity = REQUIREMENT_OK;
        $messages[] = t('Module installed correctly.');
      }
      $requirements['domain'] = array(
        'title' => $t('Domain Access'),
        'value' => theme('item_list', array('items' => $messages)),
        'severity' => $severity,
      );
      break;
  }
  return $requirements;
}

/**
 * Update note.
 *
 * Upgrading from Backdrop 5 to Backdrop 7 is not supported.
 * You must first upgrade to Backdrop 6.x.2.3 or higher, and then proceed to Backdrop 7.
 *
 */

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7000(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7001(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7300(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7301(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7302(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7303(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7304(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7305(&$sandbox) { }


// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7306(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7307(&$sandbox) { }

/**
 * Generates a machine name during the update process.
 *
 * @param $subdomain
 *  The subdomain string of the record, which should be unique.
 *
 * @return
 *  A string with dot and colon transformed to underscore.
 */
function domain_update_machine_name($subdomain) {
  return preg_replace('/[^a-z0-9_]+/', '_', $subdomain);
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7308(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7309(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7310(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7311(&$sandbox) { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.

function domain_update_7312(&$sandbox) { }

/**
 * Implements hook_update_last_removed().
 */
function domain_update_last_removed() {
  return 7312;
}

/**
 * Migrate domain variables to config.
 */
function domain_update_1000() {
  $config = config('domain.settings');
  $config->set('domain_list_size', update_variable_get('domain_list_size', 'DOMAIN_LIST_SIZE'));
  $config->set('domain_sitename_override', update_variable_get('domain_sitename_override', '1'));
  $config->set('domain_debug', update_variable_get('domain_debug', '0'));
  $config->set('domain_force_admin', update_variable_get('domain_force_admin', array()));
  $config->set('domain_vertical_tab', update_variable_get('domain_vertical_tab', '0'));
  $config->set('domain_collapse_options', update_variable_get('domain_collapse_options', '0'));
  $config->set('domain_www', update_variable_get('domain_www', '0'));
  $config->set('domain_search', update_variable_get('domain_search', '0'));
  $config->set('domain_seo', update_variable_get('domain_seo', '0'));
  $config->set('domain_edit_on_primary', update_variable_get('domain_edit_on_primary', '1'));
  $config->set('domain_default_source', update_variable_get('domain_default_source', '0'));
  $config->set('domain_grant_all', update_variable_get('domain_grant_all', 'user/*/track'));
  $config->set('domain_cron_rule', update_variable_get('domain_cron_rule', '1'));
  $config->set('domain_xmlrpc_rule', update_variable_get('domain_xmlrpc_rule', '0'));
  $config->set('domain_paths', update_variable_get('domain_paths', 'node/%n\r\nnode/%n/edit\r\ncomment/reply/%n\r\nnode/add/book/parent/%n\r\nbook/export/html/%n\r\nnode/%n/outline'));
  $config->set('domain_classes', update_variable_get('domain_classes', 'domain-[current-domain:machine_name]'));
  $config->set('domain_allow_non_ascii', update_variable_get('domain_allow_non_ascii', array()));
  $config->set('domain_add_roles', update_variable_get('domain_add_roles', '0'));
  $config->set('domain_roles', update_variable_get('domain_roles', array()));
  $config->set('domain_mymodule', update_variable_get('domain_mymodule', '0'));
  $config->set('domain_behavior', update_variable_get('domain_behavior', '0'));
  $config->set('domain_node_key', update_variable_get('domain_node_key', 'dynamic variable in file /domain/domain.install line 393'));
  $config->set('domain_hide_errors', update_variable_get('domain_hide_errors', ''));
  $config->set('domain_select_format', update_variable_get('domain_select_format', 'dynamic value in file /domain/domain.module line 1298'));
  $config->set('domain_scheme', update_variable_get('domain_scheme', 'http://'));
  $config->set('domain_skip_domain_check', update_variable_get('domain_skip_domain_check', '0'));
  $config->set('domain_node_type', update_variable_get('domain_node_type', 'dynamic variable in file /domain/domain.module line 4332'));
  $config->save();

  update_variable_del('domain_list_size');
  update_variable_del('domain_sitename_override');
  update_variable_del('domain_debug');
  update_variable_del('domain_force_admin');
  update_variable_del('domain_vertical_tab');
  update_variable_del('domain_collapse_options');
  update_variable_del('domain_www');
  update_variable_del('domain_search');
  update_variable_del('domain_seo');
  update_variable_del('domain_edit_on_primary');
  update_variable_del('domain_default_source');
  update_variable_del('domain_grant_all');
  update_variable_del('domain_cron_rule');
  update_variable_del('domain_xmlrpc_rule');
  update_variable_del('domain_paths');
  update_variable_del('domain_classes');
  update_variable_del('domain_allow_non_ascii');
  update_variable_del('domain_add_roles');
  update_variable_del('domain_roles');
  update_variable_del('domain_mymodule');
  update_variable_del('domain_behavior');
  update_variable_del('domain_node_key');
  update_variable_del('domain_hide_errors');
  update_variable_del('domain_select_format');
  update_variable_del('domain_scheme');
  update_variable_del('domain_skip_domain_check');
  update_variable_del('domain_node_type');
}
